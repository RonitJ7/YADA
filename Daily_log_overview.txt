Functionalities Overview:
1. Stores the foods consumed by the user datewise. Addition is simply by selecting the complex food and specifying servings.
2. User must be able to search through the daily logs via keywords (all and any both). Can also choose to view the whole list of foods.
3. User must be able to delete foods from the log.
4. On top of that user can be able to change a particular food log (no of servings , if entered incorrectly.)
5. User must be able to select , view and update the information for any date in the log.
6. Commands must be undoable.

Implementation Design:
-Daily Logs and Undo Commands: 
1. On one line there will be the date written in the following way : 'Date: <DD/MM/YYYY>'

2. Starting from the new line there will be the logs . After the last log there will be two new lines , and the new date will start from the third.
Eg: Date: <date>
    Log1
    Log2
    .
    .
    .Logn

    Date: <new_date>

3. Logs will be of the format <Food_Name | Servings | Calories_intake>

4. Undo commands will be implemented by pushing the reverse command of the command which made changes to the system by pushing onto the undo stack.

5. The reverse command will have the same parameters as the actual command and will do the exact oppsosite of what the actual command did.

6. The command changes will be initially pushed to the buffer , and will be visible onto the daily log file only when the user explicitly chooses to save changes made till now or user ends the session normally.

7. The buffer will be a map with key-value pairs with the keys being the dates and the values being the vector of logs.

8. Both the reverse and the usual commands will be stored as function pointers in an array.